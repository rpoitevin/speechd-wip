<?xml version="1.0" encoding="utf-8"?>
<schemalist>
  <schema id='org.freebsoft.speechd.modules.generic'>

    <key name='execute-synth' type='s'>
      <_summary>Execute Synthesizer</_summary>
      <_description>
        execute-synth is the shell command that should be
        executed in order to say some message. This command must
        stop saying the message on SIGKILL, otherwise it's useless.
        You can use the variables $LANGUAGE, $VOICE, $PITCH and $RATE
        which will be substituted for the appropriate value (you
        can modify this value, see other parameters).
        The command can be split into more lines, if necessary, using '\'.
      </_description>
      <default>"echo \'$DATA\' | espeak -w $TMPDIR/espeak.wav -v $VOICE -s $RATE -a $VOLUME -p $PITCH $PUNCT --stdin &amp;&amp; $PLAY_COMMAND $TMPDIR/espeak.wav"</default>
    </key>

    <key name='punctuation-none' type='s'>
      <_summary>Punctuation None</_summary>
      <_description>
        punctuation-none controls punctuation level None.
        It will be substituted into the $PUNCT variable depending
        on the value passed to speech dispatcher from applications.
        Note that if an empty string is specified, then $PUNCT will be blank 
        which is a default situation for espeak.
      </_description>
      <default>''</default>
    </key>

    <key name='punctuation-some' type='s'>
      <_summary>Punctuation Some</_summary>
      <_description>
        punctuation-some controls punctuation level Some.
        It will be substituted into the $PUNCT variable depending
        on the value passed to speech dispatcher from applications.
        Note that if an empty string is specified, then $PUNCT will be blank 
        which is a default situation for espeak.
      </_description>
      <default>'--punct=\"()[]{};:\"'</default>
    </key>

    <key name='punctuation-all' type='s'>
      <_summary>Punctuation All</_summary>
      <_description>
        punctuation-all controls punctuation level All.
        It will be substituted into the $PUNCT variable depending
        on the value passed to speech dispatcher from applications.
        Note that if an empty string is specified, then $PUNCT will be blank 
        which is a default situation for espeak.
      </_description>
      <default>'--punct'</default>
    </key>

    <key name='strip-punctuation-characters' type='s'>
      <_summary>Strip Punctuation Characters</_summary>
      <_description>
        strip-punctuation-characters is a list (enclosed in doublequotes) of
        all the characters that should be replaced by whitespaces in
        order not to be badly handled by the output module or misinterpreted
        by shell.
      </_description>
      <default>''</default>
    </key>

    <key name='rate-add' type='u'>
      <_summary>Rate Add</_summary>
      <_description>
        These parameters set _rate_, _pitch_, and _volume_ conversion. This is
        part of the core of the definition of this generic output
        module for this concrete synthesizer, it's not intended to
        be modified by common users.
        The resulting rate (or pitch) has the form:
              (speechd_rate * GenericRateMultiply) + GenericRateAdd
        while speechd_rate is a value between -100 (lowest) and +100 (highest)
        You have to define some meaningful conversion for each synthesizer

        Here's the mapping from SSIP (Speech Dispatcher) to ESpeak (v1.10):
        
                  SSIP Range  SSIP Default    ESpeak Range    ESpeak Default
                  ----------- ------------    ------------    --------------
        Rate      -100 to 100     0           80 to 320       160
        Pitch     -100 to 100     0            0 to 99         50
        Volume    -100 to 100     0            0 to 20         10
        
        The SSIP defaults are actually controlled via DefaultRate, DefaultPitch, and
        DefaultVolume in the speechd.conf file.
      </_description>
      <default>160</default>
    </key>

    <key name='pitch-add' type='u'>
      <_summary>Pitch Add</_summary>
      <_description>
        See rate-add
      </_description>
      <default>50</default>
    </key>
    
    <key name='volume-add' type='u'>
      <_summary>Volume Add</_summary>
      <_description>
        See rate-add
      </_description>
      <default>10</default>
    </key>

    <key name='rate-multiply' type='u'>
      <_summary>Rate Multiply</_summary>
      <_description>
        (These values are multiplied by 100, because DotConf currently
        doesn't support floats. So you can write 0.85 as 85 and so on.)
      </_description>
      <default>160</default>
    </key>

    <key name='pitch-multiply' type='u'>
      <_summary>Pitch Multiply</_summary>
      <_description>
        See rate-multiply
      </_description>
      <default>10</default>
    </key>

    <key name='rate-force-integer' type='b'>
      <_summary>Rate Force Integer</_summary>
      <_description>
        If the client program can't handle floats, you will have to
        use these two options to force integers as the parameters
        true means force integers, false means do nothing (write floats).
      </_description>
      <default>true</default>
    </key>

    <key name='pitch-force-integer' type='b'>
      <_summary>Pitch Force Integer</_summary>
      <_description>
        See rate-force-integer
      </_description>
      <default>true</default>
    </key>
    
    <key name='volume-force-integer' type='b'>
      <_summary>Volume Force Integer</_summary>
      <_description>
        See rate-force-integer
      </_description>
      <default>true</default>
    </key>

    <key name='debug' type='b'>
      <_summary>Debug</_summary>
      <_description>
        Whether debugging is enabled in this generic output module or not.
      </_description>
      <default>false</default>
    </key>

  </schema>
</schemalist>
